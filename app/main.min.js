'use strict';

var app = angular.module('openQuest', ['ui.router', 'ngMessages', 'ngAnimate', 'ui.bootstrap', 'ui.bootstrap.datetimepicker', 'colorpicker.module']);

app.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('auth', {
        url: '/',
        templateUrl: 'views/auth.html',
        controller: 'loginCtrl'
    }).state('main', {
        abstract: true,
        url: '/main',
        templateUrl: 'views/main.html',
        controller: 'mainCtrl',
        resolve: {
            getData: ['dataService', function (dataService) {
                if (!dataService.quests) {
                    dataService.fetchData();
                }
            }]
        }
    }).state('main.dashboard', {
        url: '/dashboard',
        templateUrl: 'views/dashboard.html',
        controller: 'dashboardCtrl'
    }).state('main.quests', {
        url: '/quests',
        templateUrl: 'views/quests.html',
        controller: 'questsCtrl'
    }).state('main.adventures', {
        url: '/adventures',
        templateUrl: 'views/adventures.html'
    }).state('main.questCreation', {
        url: '/questCreation',
        templateUrl: 'views/questCreation.html',
        controller: 'questCreationCtrl'
    }).state('main.adventureCreation', {
        url: '/adventureCreation',
        templateUrl: 'views/adventureCreation.html'
    }).state('main.settings', {
        url: '/settings',
        templateUrl: 'views/settings.html'
    });

    $urlRouterProvider.otherwise('/main/dashboard');
}]);
app.filter('questStatus', function () {
    return function (items, statuses) {
        var results = [];

        var checkStatus = function checkStatus(status) {
            var filtered = items.filter(function (item) {
                return item.status == status;
            });
            results = results.concat(filtered);
        };

        statuses.forEach(checkStatus);
        return results;
    };
});
app.controller('loginCtrl', ['$scope', 'auth', function ($scope, auth) {

    $scope.loginData = {
        email: '',
        password: ''
    };

    $scope.signupData = {
        email: '',
        password: '',
        repeatPassword: ''
    };

    $scope.errors = {
        login: '',
        signup: '',
        signupSuccess: ''
    };

    $scope.login = auth.login;
    $scope.signup = auth.signup;
}]);
app.controller('mainCtrl', ['$scope', 'auth', function ($scope, auth) {

    auth.checkToken();
    $scope.logout = auth.logout;

    $('#menu li').click(function () {
        $('#menu').removeClass('in');
    });
}]);
app.controller('dashboardCtrl', ['$scope', 'dataService', function ($scope, dataService) {
    $scope.categories = dataService.categories;
    $scope.quests = dataService.quests;
}]);
app.controller('questsCtrl', ['$scope', '$window', '$timeout', 'dataService', function ($scope, $window, $timeout, dataService) {

    $scope.quests = dataService.quests;
    if (!$scope.quests) {
        $timeout(function () {
            $scope.quests = dataService.quests;
        }, 500);
    }

    $scope.statuses = ['active'];
    $scope.include = function (status) {
        if ($scope.statuses.indexOf(status) != -1) {
            $scope.statuses.splice($scope.statuses.indexOf(status), 1);
        } else {
            $scope.statuses.push(status);
        }
    };

    $scope.toggle = function () {
        var length = $('#quest-content').css('margin-left') == "31px" ? 230 : 31;

        $('#quest-content').animate({ 'margin-left': length });
        $('#quest-sidebar').animate({ 'width': length });

        $('#quest-sidebar i').toggleClass('fa-chevron-right');
        $('#quest-sidebar').toggleClass('collapsed');
    };

    if ($window.innerWidth < 580) {
        $scope.toggle();
    }
}]);
app.controller('questCreationCtrl', ['$scope', '$http', 'dataService', function ($scope, $http, dataService) {

    $scope.categories = dataService.categories;
    $scope.adventures = [];

    $scope.datePicker = {
        isOpen: false,
        min: new Date(),
        options: {
            'startingDay': 1,
            'show-weeks': false
        },
        timeOptions: { 'show-meridian': false },
        open: function open() {
            this.isOpen = true;
        }
    };

    $scope.quest = {
        name: '',
        description: '',
        deadline: '',
        category: '',
        adventure: ''
    };

    $scope.newCategory = {
        name: '',
        color: '',
        background: ''
    };

    $scope.$watch('newCategory.name', function (newValue) {
        if (newValue.length > 0) {
            $scope.quest.category = '';
            $scope.categoryError = false;
        } else if ($scope.categories && $scope.categories.length > 0) {
            $scope.quest.category = $scope.categories[0].id;
        }
    });

    $scope.createQuest = function () {
        if (!$scope.quest.category && !$scope.newCategory.name) {
            $scope.categoryError = true;
            return;
        }

        if ($scope.quest.deadline) {
            $scope.quest.deadline = new Date($scope.quest.deadline).getTime();
        }

        var newQuest = {};
        for (var key in $scope.quest) {
            if ($scope.quest[key]) {
                newQuest[key] = $scope.quest[key];
            }
        }

        var sendData = function sendData() {
            $http.post('backend/createQuest.php?token=' + localStorage.token, JSON.stringify(newQuest)).then(function (response) {
                if (response.data == "success") {
                    $scope.createdQuest = true;
                    $scope.quest = {};
                }
            });
        };

        if ($scope.newCategory.name) {
            $scope.newCategory.background = $scope.newCategory.background || '#0B7BB7';
            $scope.newCategory.color = parseInt($scope.newCategory.background.replace('#', ''), 16) > 0xffffff / 2 ? '#000' : '#fff';
            $http.post('backend/createCategory.php?token=' + localStorage.token, JSON.stringify($scope.newCategory)).then(function (response) {
                console.log(response);
                newQuest.category = response.data;
                sendData();
            });
        } else {
            sendData();
        }
    };
}]);
app.service('auth', ['$http', '$state', 'dataService', function ($http, $state, dataService) {
    var self = this;

    self.checkToken = function () {
        if (!localStorage.token || localStorage.token == 'LOGGED OUT') {
            $state.go('auth');
        }
        $http.post('backend/checkToken.php', localStorage.token).then(function (response) {
            if (response.data == 'authorized') {
                console.log('you\'re logged in');
            } else {
                $state.go('auth');
            }
        });
    };

    self.login = function (loginData, error) {
        $http.post('backend/login.php', JSON.stringify(loginData)).then(function (response) {
            if (response.data.indexOf('Ooops') != -1) {
                error.login = response.data;
            } else {
                localStorage.token = response.data;
                dataService.fetchData(function () {
                    $state.go('main.dashboard');
                });
            }
        }, function (error) {
            console.error(error);
        });
    };

    self.signup = function (signupData, error, isValid) {
        if (isValid) {
            $http.post('backend/signup.php', JSON.stringify(signupData)).then(function (response) {
                if (response.data == 'error') {
                    error.signup = 'This email is already linked to an account';
                } else {
                    error.signup = '';
                    error.signupSuccess = response.data;
                }
            }, function (error) {
                console.log(error);
            });
        } else {
            error.signup = 'It seems that your data is incorrect';
        }
    };

    self.logout = function () {
        $http.post('backend/logout.php', localStorage.token).then(function () {
            localStorage.clear();
            $state.go('auth');
        }, function (error) {
            console.error(error);
        });
    };
}]);
app.service('dataService', ['$http', '$q', function ($http, $q) {
    var self = this;

    self.getData = function () {
        var deferred = $q.defer();

        $http.get('backend/getUserData.php?token=' + localStorage.token).success(function (response) {
            deferred.resolve(response);
        }).error(function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    self.fetchData = function (callback) {
        self.getData().then(function (response) {
            self.categories = response.categories || [];
            self.quests = response.quests || [];
            console.log(self.quests);
            if (callback) {
                callback();
            }
        });
    };
}]);
app.directive('compareTo', function () {
    return {
        require: 'ngModel',
        scope: {
            otherModelValue: "=compareTo"
        },
        link: function link(scope, element, attributes, ngModel) {
            ngModel.$validators.compareTo = function (modelValue) {
                return modelValue == scope.otherModelValue;
            };

            scope.$watch('otherModelValue', function () {
                ngModel.$validate();
            });
        }
    };
});
app.directive('oqNavbar', function () {
    return {
        scope: {
            title: '@title',
            icon: '@icon'
        },
        templateUrl: 'views/directives/navbar.html'
    };
});